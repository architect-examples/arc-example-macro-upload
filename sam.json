{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "Exported by architect/package@1.0.44 on 2019-09-28T08:40:13.804Z",
  "Resources": {
    "NodeS3Upload": {
      "Type": "AWS::Serverless::Api",
      "Properties": {
        "StageName": "staging",
        "DefinitionBody": {
          "openapi": "3.0.1",
          "info": {
            "title": {
              "Ref": "AWS::StackName"
            }
          },
          "paths": {
            "/": {
              "get": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndex.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/success": {
              "get": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSuccess.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/images/{file}": {
              "get": {
                "responses": {
                  "200": {
                    "description": "200 response"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetImagesFile.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "contentHandling": "CONVERT_TO_TEXT"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            },
            "/{proxy+}": {
              "x-amazon-apigateway-any-method": {
                "parameters": [
                  {
                    "name": "proxy",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndex.Arn}/invocations"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200"
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "cacheNamespace": "xlr8r",
                  "cacheKeyParameters": [
                    "method.request.path.proxy"
                  ],
                  "contentHandling": "CONVERT_TO_TEXT",
                  "type": "aws_proxy"
                }
              }
            }
          }
        },
        "EndpointConfiguration": "REGIONAL",
        "BinaryMediaTypes": [
          "*~1*"
        ],
        "MinimumCompressionSize": 0
      }
    },
    "GetIndex": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/get-index",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "node-s3-upload",
            "ARC_HTTP": "aws_proxy",
            "NODE_ENV": "staging",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "S3_UPLOAD_BUCKET": {
              "Fn::Sub": "${BucketPrefix}-upload-bucket"
            },
            "S3_UPLOAD_KEY": {
              "Ref": "Creds"
            },
            "S3_UPLOAD_SECRET": {
              "Fn::GetAtt": [
                "Creds",
                "SecretAccessKey"
              ]
            }
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "GetIndexEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/",
              "Method": "GET",
              "RestApiId": {
                "Ref": "NodeS3Upload"
              }
            }
          }
        }
      }
    },
    "GetSuccess": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/get-success",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "node-s3-upload",
            "ARC_HTTP": "aws_proxy",
            "NODE_ENV": "staging",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "S3_UPLOAD_BUCKET": {
              "Fn::Sub": "${BucketPrefix}-upload-bucket"
            },
            "S3_UPLOAD_KEY": {
              "Ref": "Creds"
            },
            "S3_UPLOAD_SECRET": {
              "Fn::GetAtt": [
                "Creds",
                "SecretAccessKey"
              ]
            }
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "GetSuccessEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/success",
              "Method": "GET",
              "RestApiId": {
                "Ref": "NodeS3Upload"
              }
            }
          }
        }
      }
    },
    "GetImagesFile": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/http/get-images-000file",
        "Runtime": "nodejs10.x",
        "MemorySize": 1152,
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_CLOUDFORMATION": {
              "Ref": "AWS::StackName"
            },
            "ARC_APP_NAME": "node-s3-upload",
            "ARC_HTTP": "aws_proxy",
            "NODE_ENV": "staging",
            "SESSION_TABLE_NAME": "jwe",
            "PYTHONPATH": "/var/task/vendor:/var/runtime:/opt/python",
            "S3_UPLOAD_BUCKET": {
              "Fn::Sub": "${BucketPrefix}-upload-bucket"
            },
            "S3_UPLOAD_KEY": {
              "Ref": "Creds"
            },
            "S3_UPLOAD_SECRET": {
              "Fn::GetAtt": [
                "Creds",
                "SecretAccessKey"
              ]
            }
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {
          "GetImagesFileEvent": {
            "Type": "Api",
            "Properties": {
              "Path": "/images/{file}",
              "Method": "GET",
              "RestApiId": {
                "Ref": "NodeS3Upload"
              }
            }
          }
        }
      }
    },
    "InvokeProxyPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "GetIndex"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiId}/*/*",
            {
              "restApiId": {
                "Ref": "NodeS3Upload"
              }
            }
          ]
        }
      }
    },
    "Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ArcGlobalPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          }
        ]
      }
    },
    "RoleReflectionPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "Role",
      "Properties": {
        "PolicyName": "ArcRoleReflectionPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "iam:GetRolePolicy",
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:iam::${AWS::AccountId}:role/${role}",
                  {
                    "role": {
                      "Ref": "Role"
                    }
                  }
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      }
    },
    "UploadBucket": {
      "DependsOn": "UploadLambdaInvokePermission",
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Sub": "${BucketPrefix}-upload-bucket"
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "GET",
                "POST"
              ],
              "AllowedOrigins": [
                "*"
              ],
              "MaxAge": "3000"
            }
          ]
        },
        "NotificationConfiguration": {
          "LambdaConfigurations": [
            {
              "Function": {
                "Fn::GetAtt": [
                  "UploadLambda",
                  "Arn"
                ]
              },
              "Event": "s3:ObjectCreated:*",
              "Filter": {
                "S3Key": {
                  "Rules": [
                    {
                      "Name": "prefix",
                      "Value": "raw"
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "UploadLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "s3.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:s3:::${BucketPrefix}-upload-bucket"
        }
      }
    },
    "UploadLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "./src/upload",
        "Runtime": "nodejs8.10",
        "MemorySize": 3008,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "S3_UPLOAD_BUCKET": {
              "Fn::Sub": "${BucketPrefix}-upload-bucket"
            },
            "S3_UPLOAD_KEY": {
              "Ref": "Creds"
            },
            "S3_UPLOAD_SECRET": {
              "Fn::GetAtt": [
                "Creds",
                "SecretAccessKey"
              ]
            },
            "NODE_ENV": "staging"
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${role}",
            {
              "role": {
                "Ref": "UploadRole"
              }
            }
          ]
        }
      }
    },
    "Uploader": {
      "Type": "AWS::IAM::User",
      "Properties": {}
    },
    "UploadMinimalPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "UploadBucket",
      "Properties": {
        "PolicyName": "UploadPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:PutObjectAcl"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::${BucketPrefix}-upload-bucket"
                },
                {
                  "Fn::Sub": "arn:aws:s3:::${BucketPrefix}-upload-bucket/*"
                }
              ]
            }
          ]
        },
        "Users": [
          {
            "Ref": "Uploader"
          }
        ]
      }
    },
    "Creds": {
      "Type": "AWS::IAM::AccessKey",
      "DependsOn": "Uploader",
      "Properties": {
        "UserName": {
          "Ref": "Uploader"
        }
      }
    },
    "UploadRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ArcGlobalPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          }
        ]
      }
    },
    "UploadPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "UploadMacroPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:PutObjectAcl",
                "s3:ListBucket"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::${BucketPrefix}-upload-bucket"
                },
                {
                  "Fn::Sub": "arn:aws:s3:::${BucketPrefix}-upload-bucket/*"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "Role"
          },
          {
            "Ref": "UploadRole"
          }
        ]
      }
    }
  },
  "Outputs": {
    "API": {
      "Description": "API Gateway",
      "Value": {
        "Fn::Sub": [
          "https://${restApiId}.execute-api.${AWS::Region}.amazonaws.com/staging",
          {
            "restApiId": {
              "Ref": "NodeS3Upload"
            }
          }
        ]
      }
    },
    "restApiId": {
      "Description": "HTTP restApiId",
      "Value": {
        "Ref": "NodeS3Upload"
      }
    }
  },
  "Parameters": {
    "BucketPrefix": {
      "Type": "String",
      "Default": "by20e"
    }
  }
}